#!/usr/bin/env python3
"""
File-Pull —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π HPN SSH –¥–ª—è –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ç–µ–≤—ã–º –¥–∏—Å–∫–∞–º
–ê–≤—Ç–æ—Ä: KomarovAI
"""

import os
import time
import subprocess
import sys
from loguru import logger
from hpn_ssh_manager import HPNSSHManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
MERGER_MOUNT_POINT = os.environ.get("MERGER_MOUNT_POINT", "/data/unified")
HPN_REMOTE_MOUNT = "/mnt/hpn-remote"

# –ü—É—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
CHECK_PATHS = [MERGER_MOUNT_POINT, "/mnt/webdav", "/mnt/rclone", "/data/local", HPN_REMOTE_MOUNT]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.add("/var/log/file-pull/app.log", rotation="10 MB")
logger.add("/var/log/file-pull/hpn_ssh.log", rotation="10 MB", filter=lambda record: "hpn" in record["name"].lower())


def load_hpn_config() -> dict:
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ HPN SSH –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    return {
        'HPN_REMOTE_HOST': os.environ.get('HPN_REMOTE_HOST', ''),
        'HPN_REMOTE_USER': os.environ.get('HPN_REMOTE_USER', ''),
        'HPN_REMOTE_PORT': os.environ.get('HPN_REMOTE_PORT', '2222'),
        'HPN_REMOTE_PATH': os.environ.get('HPN_REMOTE_PATH', '/home'),
        'HPN_ENABLED': os.environ.get('HPN_ENABLED', 'false').lower() == 'true'
    }


def is_mounted(path: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø—É—Ç—å
    """
    try:
        out = subprocess.check_output(["mount"]).decode()
        return any(path in line for line in out.splitlines())
    except Exception:
        return False


def setup_hpn_ssh(hpn_manager: HPNSSHManager, config: dict) -> bool:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HPN SSH —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    """
    if not config.get('HPN_ENABLED'):
        logger.info("HPN SSH –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return True
        
    if not config.get('HPN_REMOTE_HOST'):
        logger.warning("HPN_REMOTE_HOST –Ω–µ –∑–∞–¥–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º HPN SSH")
        return True
    
    logger.info(f"üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HPN SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {config['HPN_REMOTE_HOST']}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not hpn_manager.setup_ssh_config():
        logger.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        return False
    
    # –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HPN SSH —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    success = hpn_manager.mount_hpn_storage(
        remote_path=config['HPN_REMOTE_PATH'],
        local_mount_point=HPN_REMOTE_MOUNT
    )
    
    if success:
        logger.success(f"‚úÖ HPN SSH —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —É—Å–ø–µ—à–Ω–æ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ: {HPN_REMOTE_MOUNT}")
        
        # –ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        logger.info("üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ HPN SSH...")
        benchmark = hpn_manager.benchmark_performance(HPN_REMOTE_MOUNT)
        
        if benchmark.get('status') == 'success':
            logger.success(
                f"üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å HPN SSH: "
                f"–ó–∞–ø–∏—Å—å: {benchmark['write_speed_mbps']} –ú–ë/—Å, "
                f"–ß—Ç–µ–Ω–∏–µ: {benchmark['read_speed_mbps']} –ú–ë/—Å"
            )
        else:
            logger.warning(f"‚ö†Ô∏è –ë–µ–Ω—á–º–∞—Ä–∫ –Ω–µ —É–¥–∞–ª—Å—è: {benchmark.get('error', 'unknown')}")
            
        return True
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å HPN SSH —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
        return False


def ensure_mounts(hpn_manager: HPNSSHManager = None) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–π
    """
    ok = True
    mount_status = {}
    
    for p in CHECK_PATHS:
        if os.path.isdir(p):
            mounted = is_mounted(p)
            mount_status[p] = mounted
            logger.info(f"üìÅ {p} —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω={mounted}")
            
            # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ MergerFS
            if p == MERGER_MOUNT_POINT and not mounted:
                logger.warning("‚ö†Ô∏è MergerFS –Ω–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–∏—Ç—å setup.sh")
                subprocess.call(["/bin/bash", "-lc", "/app/scripts/setup.sh"]) 
                time.sleep(3)
                mounted = is_mounted(p)
                mount_status[p] = mounted
                if not mounted:
                    ok = False
                    
            # –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HPN SSH
            elif p == HPN_REMOTE_MOUNT and not mounted and hpn_manager:
                logger.warning("‚ö†Ô∏è HPN SSH –Ω–µ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å")
                config = load_hpn_config()
                if config.get('HPN_ENABLED') and config.get('HPN_REMOTE_HOST'):
                    success = hpn_manager.mount_hpn_storage(
                        remote_path=config['HPN_REMOTE_PATH'],
                        local_mount_point=HPN_REMOTE_MOUNT
                    )
                    if not success:
                        ok = False
        else:
            logger.warning(f"‚ö†Ô∏è {p} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            mount_status[p] = False
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    total_mounts = len(CHECK_PATHS)
    active_mounts = sum(1 for status in mount_status.values() if status)
    logger.info(f"üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {active_mounts}/{total_mounts} –∞–∫—Ç–∏–≤–Ω—ã")
    
    return ok


def log_system_info():
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    """
    try:
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        hostname = subprocess.check_output(['hostname']).decode().strip()
        uptime = subprocess.check_output(['uptime']).decode().strip()
        
        logger.info(f"üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞: {hostname}")
        logger.info(f"‚è∞ Uptime: {uptime}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ HPN SSH
        try:
            hpn_version = subprocess.check_output(['/usr/local/bin/ssh', '-V'], stderr=subprocess.STDOUT).decode().strip()
            logger.info(f"üîê HPN SSH: {hpn_version}")
        except:
            logger.warning("‚ö†Ô∏è HPN SSH –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        # –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
        try:
            interfaces = subprocess.check_output(['ip', 'addr', 'show']).decode()
            active_interfaces = [line.strip() for line in interfaces.split('\n') if 'inet ' in line and '127.0.0.1' not in line]
            logger.info(f"üåê –°–µ—Ç–µ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã: {len(active_interfaces)} –∞–∫—Ç–∏–≤–Ω—ã—Ö")
        except:
            pass
            
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ: {e}")


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    """
    logger.info("üöÄ FILE-PULL —Å HPN SSH –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å—Ç–∞—Ä—Ç—É–µ—Ç")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    log_system_info()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ HPN SSH
    hpn_config = load_hpn_config()
    logger.info(f"‚öôÔ∏è HPN SSH —Å—Ç–∞—Ç—É—Å: {'–≤–∫–ª—é—á–µ–Ω' if hpn_config.get('HPN_ENABLED') else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HPN SSH Manager
    hpn_manager = None
    if hpn_config.get('HPN_ENABLED'):
        hpn_manager = HPNSSHManager(hpn_config)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HPN SSH –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
        if not setup_hpn_ssh(hpn_manager, hpn_config):
            logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ HPN SSH")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ HPN SSH
            hpn_manager = None
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    check_interval = 15  # —Å–µ–∫—É–Ω–¥
    health_check_counter = 0
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–π
            ok = ensure_mounts(hpn_manager)
            
            if not ok:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Ü–∏–∫–ª–æ–≤ (75 —Å–µ–∫—É–Ω–¥)
            health_check_counter += 1
            if health_check_counter >= 5:
                health_check_counter = 0
                
                if hpn_manager:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ HPN SSH
                    status = hpn_manager.get_connection_status()
                    logger.info(
                        f"üìä HPN SSH —Å—Ç–∞—Ç—É—Å: {status['active_mounts']}/{status['total_mounts']} –∞–∫—Ç–∏–≤–Ω—ã"
                    )
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫–∞–∂–¥–æ–≥–æ HPN SSH –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    for mount_point, info in status['mounts'].items():
                        if info['status'] == 'failed':
                            logger.warning(
                                f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ–≥–æ HPN SSH –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {mount_point}"
                            )
                            # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                            hpn_manager.unmount_hpn_storage(mount_point)
                            time.sleep(2)
                            hpn_manager.mount_hpn_storage(
                                remote_path=hpn_config['HPN_REMOTE_PATH'],
                                local_mount_point=mount_point
                            )
            
            time.sleep(check_interval)
            
        except KeyboardInterrupt:
            logger.info("üìù –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            break
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(check_interval)
    
    # Cleanup –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    if hpn_manager:
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ HPN SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
        for mount_point in list(hpn_manager.mount_points.keys()):
            hpn_manager.unmount_hpn_storage(mount_point)
    
    logger.info("üëã FILE-PULL –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        sys.exit(0)
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)